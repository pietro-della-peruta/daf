# Copyright 2017 TEAM PER LA TRASFORMAZIONE DIGITALE
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Questo e' la descrizione delle API che vengono esposte da dati.gov.it.
# Le API sono pubbliche
swagger: '2.0'
info:
  title: Security Manager API
  description: Security Manager API
  version: "BETA"
  termsOfService: http://termofservice
  contact:
    name: team digitale
    url: https://teamdigitale.governo.it
  license:
    name: Creative Commons 4.0 International
    url: http://creativecommons.org/licenses/by/4.0/
#host : localhost:9002
host : security-manager.default.svc.cluster.local:9000
# will be prefixed to all paths
basePath: /security-manager/v1
# array of all schemes that your API supports
schemes:
  - http
  - https
produces:
  - application/json
consumes:
  - application/json
#securityDefinitions:
  #basicAuth:
    #type: basic
    #description: HTTP Basic Authentication. Works over `HTTP` and `HTTPS`
paths:
  "/token":
    get:
      summary: Get Token
      description: |
        It returns the JWT token
      tags:
        - JWT Token
      operationId: token
      #security:
        #- basicAuth: []
      responses:
        200:
          description: The JWT token
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  "/ipa/user":
    post:
      tags:
        - IPA
      description: Create a user
      operationId: createIPAuser
      produces:
      - application/json
      parameters:
      - name: user
        in: body
        description: User
        required: true
        schema:
          #type: object
          $ref: '#/definitions/IpaUser'
      responses:
        200:
          description: Success
          schema:
            #type: object
            $ref: '#/definitions/Success'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'
  "/ipa/registration/request":
    post:
      tags:
        - IPA
      description: Handle a user registration request
      operationId: registrationrequest
      produces:
      - application/json
      parameters:
      - name: user
        in: body
        description: User
        required: true
        schema:
          #type: object
          $ref: '#/definitions/IpaUser'
      responses:
        200:
          description: Success
          schema:
            #type: object
            $ref: '#/definitions/Success'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'
  "/ipa/registration/confirm":
    get:
      tags:
        - IPA
      description: Confirm registration
      operationId: registrationconfirm
      produces:
      - application/json
      parameters:
      - name: token
        in: query
        description: Confirmation token
        required: true
        type: string
      responses:
        200:
          description: Success
          schema:
            #type: object
            $ref: '#/definitions/Success'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'
  "/ipa/user/{uid}":
    get:
      tags:
        - IPA
      description: Show user info
      operationId: showipauser
      produces:
      - application/json
      parameters:
      - name: uid
        in: path
        description: User id
        required: true
        type: string
      responses:
        200:
          description: IPA User
          schema:
            type: object
            $ref: '#/definitions/IpaUser'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'
definitions:
  IpaUser:
    type: object
    required:
      - uid
      - givenname
      - sn
      - mail
    properties:
      uid:
        description: user login
        type: string
      givenname:
        description: First name
        type: string
      sn:
        description: Last name
        type: string
      mail:
        type: string
      userpassword:
        type: string
  Error:
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
  Success:
    type: object
    properties:
      message:
        type: string
      fields:
        type: string